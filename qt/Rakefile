require "rake"
require "rake/clean"

APP_NAME     = "QtCelerityViewer"
APP_VERSION = `git rev-parse HEAD`[0,7].chomp

CLEAN.include   "QtCelerityViewer.{app,xcodeproj}",
                "*.o",
                "debug",
                "release"

CLOBBER.include "moc_*.cpp",
                "Makefile*",
                "*.{zip,tgz,dmg}"

module System
  module_function

  def platform
    @platform ||= case RUBY_PLATFORM
    when /java/
      :java
    when /mswin|msys|mingw/
      :windows
    when /darwin/
      :macosx
    when /linux/
      :linux
    else
      RUBY_PLATFORM
    end
  end

  def os
    return @os if @os
    @os = platform()

    if @os == :java
      os_name = java.lang.System.getProperty("os.name")
      @os = case os_name
            when /windows/i
              :windows
            when /mac os/i
              :macosx
            when /linux/i
              :linux
            else
              os_name
            end
    end

    @os
  end
end

desc 'download and install dependencies'
task :deps do
  case System.platform
  when :macosx

    if `port installed cmake` =~ /None of the specified ports are installed/
      sh "sudo port install cmake"
    end

    unless File.directory?("/Library/Frameworks/QtWebKit.framework")
      sh "curl -O http://get.qtsoftware.com/qtsdk/qt-sdk-mac-opensource-2009.03.1.dmg && open qt-sdk-mac-opensource-2009.03.1.dmg"
      abort("please complete the Qt SDK installer")
    end
  when :linux
    unless `dpkg -L libqt4-dev`.include?("libQtWebKit.so")
      sh "sudo apt-get install cmake libqt4-dev"
    end

    sh "sudo -k" # avoid running the rest as root
  when :windows
    unless File.directory?(dir = "C:/Qt")
      puts "Qt not found in #{dir.inspect}"
      puts "please download and install Qt 4.5 from http://qt.nokia.com/downloads"
    end
  else
    raise "don't know how to get dependencies for: #{System.platform.inspect}"
  end
end

desc 'compile'
task :compile => :deps do
  args         = case System.platform
                 when :macosx
                   ["-spec macx-g++", nil]
                 when :windows
                   [nil, "release"]
                 else
                   []
                 end

  sh "qmake #{args.first}"
  sh "make #{args.last}"
end

case System.platform
when :macosx
  desc 'install to /Applications'
  task :install => :compile do
    app = "/Applications/QtCelerityViewer.app"
    rm_r app if File.exist?(app)
    mv "./QtCelerityViewer.app", "/Applications", :verbose => true
  end

  desc %Q{build #{APP_NAME}-#{APP_VERSION}.dmg}
  task :dmg => :compile do
    name = "#{APP_NAME}-#{APP_VERSION}"
  	mkdir "image", :verbose => true
  	cp_r "./QtCelerityViewer.app", "image", :verbose => true

  	puts 'Creating Image...'
  	sh %{hdiutil create -volname #{name} -srcfolder image #{name}.dmg}

  	rm_rf "image", :verbose => true
  end

  desc 'compile and run'
  task :run => :compile do
    sh "open QtCelerityViewer.app"
  end

when :linux
  desc "create #{APP_NAME}-#{APP_VERSION}.tgz"
  task :package => :compile do
    sh "tar zcf #{APP_NAME}-#{APP_VERSION}.tgz ./QtCelerityViewer"
  end

  desc 'compile and run'
  task :run => :compile do
    sh "./QtCelerityViewer"
  end
when :windows
  desc "create #{APP_NAME}-#{APP_VERSION}.zip"
  task :package => :compile do
    zipfile = "#{APP_NAME}-#{APP_VERSION}.zip"
    zipdir  = "QtCelerityViewer"
    qtdir   = ENV['QTDIR'] || raise("could not find QTDIR environment variable")
    qtbin   = File.join(qtdir, "bin")

    mkdir zipdir
    begin
      cp "release/QtCelerityViewer.exe", zipdir
      cp "lib/libqjson-win32.dll", "#{zipdir}/libqjson.dll"
      cp "#{qtbin}/mingwm10.dll", zipdir
      cp "#{qtbin}/QtCore4.dll", zipdir
      cp "#{qtbin}/QtGui4.dll", zipdir
      cp "#{qtbin}/QtNetwork4.dll", zipdir
      cp "#{qtbin}/QtWebKit4.dll", zipdir

      sh "7za a #{zipfile} #{zipdir}"
    ensure
      rm_r zipdir
    end
  end

  desc 'compile and run'
  task :run => :compile do
    cp "lib/libqjson.dll", "release/libqjson.dll"
    sh "start release/QtCelerityViewer.exe"
  end

end

task :default do
  case System.platform
  when :macosx
    puts <<-TEXT

      Run `rake install` to fetch dependencies, compile and install to /Applications

    TEXT
  when :linux
    puts <<-TEXT

      Run `rake compile` to install dependencies and compile

    TEXT
  end
end

task :test do
  sh "jruby <<< '#{<<-RUBY}'"
  require "rubygems"
  require "celerity"

  c = Celerity::Browser.new
  c.goto "google.com"
  c.close

  c = Celerity::Browser.new
  c.goto "yahoo.com"
  RUBY
end